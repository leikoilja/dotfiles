## General  ##
# Colorize the ls output
# alias ls='ls --color=auto'

# Use a long listing format
alias ll='ls -la'

# Show hidden files
# alias l.='ls -d .* --color=auto'

# get rid of command not found
alias cd..='cd ..'

# a quick way to get out of current directory
alias ..='cd ..'
alias ...='cd ../../'
alias dev='cd ~/Development/'
alias dotfiles='cd ~/Development/Dev_settings/dotfiles/'

alias tmn='tmux new -s'
alias tma='tmux attach'
alias TTstart="tmuxinator start"
alias TTdefault="tmuxinator start default"


## Platform dependant commands
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

if [ ${machine} = "Linux" ]; then
    echo "** Activating Linux dependant alias **"
    alias magit="emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"
elif [ ${machine} = "Mac" ]; then
    echo "** Activating Mac dependant alias **"
    # alias magit="/usr/local/Cellar/emacs-plus@27/27.1/Emacs.app/Contents/MacOS/Emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"
    alias magit="/opt/homebrew/bin/emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"

    echo "** Activating M1 specific alias **"
    # alias ag="/opt/homebrew/bin/ag" symulinked to /usrl/local/bin
    alias brew="/opt/homebrew/bin/brew"
    # alias nvim="/opt/homebrew/bin/nvim"
    # alias tmux="/opt/homebrew/bin/tmux"
    # alias zsh="/opt/homebrew/bin/zsh"
    alias vlc='/Applications/VLC.app/Contents/MacOS/VLC'

    # alias tmux-amd="/usr/local/bin/tmux"
    alias brew-amd="/usr/local/bin/brew"
fi

# Silver Searcher global ignore
alias ag='ag --path-to-ignore ~/.agignore'

# Neovim
alias vim="nvim"


## Project related comands
# (note that project_name is extracted from tmux session's name)
project_name="$(tmux display-message -p '#S')"
if ! { [[ "$TERM" =~ "screen".* ]]; } then
  # Not in Tmux session
  project_name="default"
fi

if [ ${project_name} = "jobylon" ]; then
    echo "** Activating Jobylon dependant alias **"
    alias t="task sync; task project:Jobylon"
    alias ta="task add project:Jobylon"
elif [ ${project_name} = "" ]; then
    echo "** Activating Mac dependant alias **"
    alias magit="/usr/local/Cellar/emacs-plus@27/27.1/Emacs.app/Contents/MacOS/Emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"
else
    # Tasks (default)
    alias t="task sync; task project:Sandbox"
    alias ta="task add project:Sandbox"
fi

## Custom functions ##
# Stop all containers
dockerstopall() { docker stop $(docker ps -a -q); }

# Remove existing Jobylon containers and rebuild
docker-rebuild() {
   jbl;
   dstop;
   docker-compose up --build web worker scheduler
  echo '------ Ready to go --------';
}

removecontainers() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

dockerarmageddon() {
    removecontainers
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
}

check_if_app_runs() {
  number=$(ps aux | grep -v grep | grep -c ${1})

  if [ $number -gt 0 ]
    then
      echo 'Alredy running' ${1}
      return 1
  else
      echo $1 'is not running'
      return 0
  fi
}

start_app_if_off() {
  if check_if_app_runs ${1}
    then
      echo 'Starting' $1
      open -a ${1};
      echo 'Sleeping' $2 'seconds';
      sleep $2;
  fi
}

## Docker & Docker-compose ##
alias dstart="echo '--- Starting all the containers ---'; docker-compose start"
alias dstop="echo '--- Stopping all the containers ---'; docker-compose stop"
alias dlogs="echo '--- Lets dig into logs ---'; docker-compose logs -f"
alias dps="echo '--- Running docker containers ---'; docker-compose ps"
alias dshell="echo '--- Entering web contained shell ---'; docker-compose exec web python manage.py shell"
alias drestart="echo '--- Restarting all docker containers ---'; dockerstopall; dstart"


## Jobylon ##
# Note jmm is specified in zshrc
alias TTjbl="tmuxinator start jbl-start"
alias TTjbl-js="tmuxinator start jbl-js-start"
alias TTjbl-components-js="tmuxinator start jbl-components-js-start"
alias jbl="cd ~/Development/Jobylon/jbl-web"
alias jdebug2="echo '--- Restarting web container for debugging  ---'; jstop web; docker-compose run --service-ports --rm web python -m ipdb manage.py runserver 0.0.0.0:8000; jstart web"
alias jdebug="echo '--- Web debugging on 8003 ---'; docker-compose exec web python -m ipdb manage.py runserver 0.0.0.0:8003"
alias jgulp="echo '--- Compiling frontend files (grunt) ---'; jbl; docker-compose exec web npm run gulp"
alias jrebuild="echo '--- Rebuilding all JBL docker containers ---'; docker-rebuild; jrestart"
alias jwatch="echo '--- Watching frontend files (gulp) ---'; jbl; docker-compose exec web npm run gulp watch"
alias jps="jbl; dps"
# alias jrestart="jbl; dockerstopall; dstart"
alias jrestart="jbl; start_app_if_off 'Docker' 20; dockerstopall; dstart"
alias jlogs="jbl; docker-compose logs -f web worker scheduler"
alias jlogs_full="jbl; dlogs"
alias jm="jbl; docker-compose exec web python manage.py migrate"
alias jshell="jbl; dshell"
alias jstart="jbl; dstart"
alias jstop="jbl; dstop"
alias jtest="jbl; docker-compose exec web python manage.py test $1 --settings=jbl_web.settings.test_fast --parallel 4"
alias jtest_ipdb="jbl; docker-compose exec web python -m ipdb manage.py test $1 --settings=jbl_web.settings.test_fast"  # with ipdb
alias jtest_full="jbl; docker-compose exec web python -m ipdb manage.py test $1 --settings=jbl_web.settings.test"
alias jclean="echo '--- Resetting memcached and redis ---'; jbl; docker-compose exec redis redis-cli FLUSHALL; echo flush_all | nc localhost 11211; jrestart"
alias jbash="jbl; docker-compose exec web bash"
alias jreindex="jbl; docker-compose exec web python manage.py rebuild_index"


## Gingernest ##
# Note gmm is specified in zshrc
alias TTgingernest="tmuxinator start gingernest-start"
alias gingernest="cd ~/Development/gingernest"
alias gdebug="echo '--- Restarting web container for debugging  ---'; gstop web; docker-compose run --service-ports --rm web poetry run python -m ipdb manage.py runserver 0.0.0.0:9000; gstart web"
alias grestart="gingernest; dockerstopall; gstart"
alias gstart="gingernest; dstart"
alias gstop="gingernest; dstop"
alias gshell="gingernest; dshell"
alias glogs="gingernest; dlogs"
alias grebuild="echo '--- Rebuilding all gingernest docker containers ---'; docker-rebuild; grestart"
alias gps="gingernest; dps"
# alias gtest="gingernest; docker-compose exec web python manage.py test $1 --pattern='tests_*.py'"
alias gtest="gingernest; docker-compose exec web python manage.py test $1 --settings=gingernest.settings.test"
alias gbash="gingernest; docker-compose exec web bash"
# alias gproduction_build="gingernest; ssh hass-local -t tmux send-keys -R 'cd\ /home/pi/gingernest-production' Enter 'docker-compose\ -f\ docker-compose.prod.yml\ stop' Enter 'docker-compose\ -f\ docker-compose.prod.yml\ build\ --no-cache\ web\ worker\ scheduler' Enter"


## React Native ##
alias TTRN="tmuxinator start rn-start"
alias TTMID="tmuxinator start mid-start"


## Master Thesis ##
alias TTMT="tmuxinator start thesis-start"
