## General  ##

# kubernetes
alias k="kubectl"

# Use a long listing format
alias ll='ls -la'

# get rid of command not found
alias cd..='cd ..'

# fabric and telos
alias fabric='fabric-ai'
alias telos='cat $TELOS_FILE_PATH'

alias process_journal='
  # Navigate to the directory containing daily markdown files
  cd "$OBSIDIAN_DAILIES_PATH" || exit 1

  # Loop through each markdown file in the directory
  for file in *.md; do
    # Extract the date part of the filename (without the .md extension)
    date_part="${file%.md}"

    # Create a micro summary using the fabric command
    summary=$(cat "$file" | fabric -p create_micro_summary)

    # Append the summary to the specified Telos file with the updated header format
    echo -e "\n### Journal summary for $date_part\n$summary" >> "$TELOS_FILE_PATH"

    # Move the processed file to the archive directory
    mv "$file" archive/
  done
'

# Don't forget to reload your shell configuration after adding the alias

# Don't forget to reload your shell configuration after adding the alias

# a quick way to get out of current directory
alias ..='cd ..'
alias ...='cd ../../'
# alias dev='cd ~/Development/'
# alias dotfiles='cd ~/Development/dotfiles/'

alias rm_node_modules="find . -name 'node_modules' -type d -prune -print -exec rm -rf '{}' \;"
alias ignorenm="bun ~/Development/synology-drive-ignore-nm/index.ts --ignore=dist,build,.next,.venv,venv,__pycache__"

alias ytdl='yt-dlp -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b"'

# quartz
alias q-run='cd ~/Development/quartz; npx quartz build --serve --verbose'
alias q-sync='cd ~/Development/quartz; npx quartz sync '

## Platform speficif commands
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

if [ ${machine} = "Linux" ]; then
    echo "** Activating Linux specific alias **"
    # alias magit="emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"
elif [ ${machine} = "Mac" ]; then
    echo "** Activating Mac arm specific alias **"
    alias magit="/opt/homebrew/bin/emacs -nw --eval '(progn (magit-status) (delete-other-windows))'"

    alias brew="/opt/homebrew/bin/brew"
    alias brew-amd="/usr/local/bin/brew"
fi

# Silver Searcher global ignore
alias ag='ag --path-to-ignore ~/.agignore'

# Neovim
alias vim="nvim"  # using lua config

## Custom functions ##
# Stop all containers
dockerstopall() { docker stop $(docker ps -a -q); }

# Remove existing Jobylon containers and rebuild
docker-rebuild() {
   cdjbl;
   dstop;
   docker compose up --build
  echo '------ Ready to go --------';
}

check_if_app_runs() {
  number=$(ps aux | grep -v grep | grep -c ${1})

  if [ $number -gt 0 ]
    then
      echo 'Alredy running' ${1}
      return 1
  else
      echo $1 'is not running'
      return 0
  fi
}

start_app_if_off() {
  if check_if_app_runs ${1}
    then
      echo 'Starting' $1
      open -a ${1};
      echo 'Sleeping' $2 'seconds';
      sleep $2;
  fi
}

## Docker & Docker compose ##
alias dstopall="echo '--- Stopping all the containers ---'; dockerstopall"
alias dstart="echo '--- Starting all the docker compose containers ---'; docker compose start"
alias dstop="echo '--- Stopping all the docker compose containers ---'; docker compose stop"
alias dlogs="echo '--- Lets dig into logs ---'; docker compose logs -f"
alias dps="echo '--- Running docker containers ---'; docker ps"

## Jobylon ##
alias cdjbl="z jbl-web"
alias jdebug2="echo '--- Restarting web container for debugging  ---'; jstop web; docker compose run --service-ports --rm web python -m ipdb manage.py runserver 0.0.0.0:8000; jstart web"
alias jdebug="echo '--- Web debugging on 8003 ---'; docker compose exec web python -m ipdb manage.py runserver 0.0.0.0:8003"
alias jgulp="echo '--- Compiling frontend files (grunt) ---'; cdjbl; docker compose exec web npm run gulp"
alias jrebuild="echo '--- Rebuilding all JBL docker containers ---'; docker-rebuild; jrestart"
alias jwatch="echo '--- Watching frontend files (gulp) ---'; cdjbl; docker compose exec web npm run gulp watch"
alias jps="cdjbl; dps"
alias jrestart="cdjbl; dockerstopall; dstart"
alias jm="cdjbl; docker compose exec web python manage.py migrate"
# Note jmm is specified in zshrc
alias jshell="cdjbl; echo '--- Entering web contained shell ---'; docker compose exec web python manage.py shell"
alias jstart="cdjbl; dstart"
alias jstop="cdjbl; dstop"
alias jtest="cdjbl; docker compose exec web python -m debugpy --listen 0.0.0.0:8004 -m pytest --rootdir=jbl_web --disable-warnings --pyargs $1"
alias jtest_one="cdjbl; docker compose exec web python -m debugpy --listen 0.0.0.0:8004 -m pytest --rootdir=jbl_web --disable-warnings --pyargs $1"
alias jclean="echo '--- Resetting memcached and redis ---'; cdjbl; docker compose exec redis redis-cli FLUSHALL; echo flush_all | nc localhost 11211; jrestart"
alias jbash="cdjbl; docker compose exec web bash"
alias jreindex="cdjbl; docker compose exec web python manage.py rebuild_index"